{"name":"ReCaptcha for Grails","tagline":"","body":"# Version 1.0 Notice\r\n\r\nBeginning with version 1.0 of this plugin, only the new \"checkbox\" captcha is supported. Please use version 0.7.0 if you require the legacy functionality.\r\n\r\n**Note:** This plugin currently only supports the \"traditional\" captcha use case of automatic rendering. Explicit rendering will be available soon. (See [the ReCaptcha docs](https://developers.google.com/recaptcha/docs/display) for more information about automatic vs. explicit.\r\n\r\n# Introduction\r\n\r\nThis plugin is designed to make using the ReCaptcha and Mailhide services within Grails easy. In order to use this plugin, you must have a ReCaptcha account, available from [http://www.google.com/recaptcha](http://www.google.com/recaptcha).\r\n\r\n# Installation\r\n\r\nAdd the following to your `grails-app/conf/BuildConfig.groovy`\r\n\r\n    …\r\n    plugins {\r\n        …\r\n        compile ':recaptcha:1.1.0'\r\n        …\r\n    }\r\n    \r\nUpon installation, run `grails recaptcha-quickstart` to create the skeleton configuration. The quickstart has two targets: `integrated` or `standalone`, depending on where you'd like the configuration to live.\r\n\r\n## Integrated Configuration\r\nIntegrated configuration adds the following to the end of your `Config.groovy` file:\r\n\r\n    // Added by the Recaptcha plugin:\r\n    recaptcha {\r\n        // These keys are generated by the ReCaptcha service\r\n        publicKey = \"\"\r\n        privateKey = \"\"\r\n\r\n        // Include the noscript tags in the generated captcha\r\n        includeNoScript = true\r\n\r\n        // Include the required script tag with the generated captcha\r\n        includeScript = true\r\n\r\n        // Set to false to disable the display of captcha\r\n        enabled = true\r\n    }\r\n\r\n    mailhide {\r\n        // Generated by the Mailhide service\r\n        publicKey = \"\"\r\n        privateKey = \"\"\r\n    }\r\n    \r\nThis configuration can be modified to mimic the standalone if there is a need for different behavior depending on the current environment.\r\n\r\n## Standalone Configuration\r\nStandalone configuration creates a file called  `RecaptchaConfig.groovy`  in  `grails-app/conf` with the following content:\r\n\r\n\trecaptcha {\r\n\t    // These keys are generated by the ReCaptcha service\r\n\t    publicKey = \"\"\r\n\t    privateKey = \"\"\r\n\r\n\t    // Include the noscript tags in the generated captcha\r\n\t    includeNoScript = true\r\n\r\n\t    // Include the required script tag with the generated captcha\r\n        includeScript = true\r\n\t}\r\n\r\n\tmailhide {\r\n\t    publicKey = \"\"\r\n\t    privateKey = \"\"\r\n\t} \r\n\r\n\tenvironments {\r\n\t  development {\r\n\t    recaptcha {\r\n\t      // Set to false to disable the display of captcha\r\n\t      enabled = false\r\n\t    }\r\n\t  }\r\n\t  production {\r\n\t    recaptcha {\r\n\t      // Set to false to disable the display of captcha\r\n\t      enabled = true\r\n\t    }\r\n\t  }\r\n\t}\r\n\r\n## Externalized Configuration\r\nSee the Grails docs for examples of using externalized configuration files. The ReCaptcha config can be externalized as\r\nthe `.groovy` file (easiest), or it can be converted into a Java `.properties` file.\r\n\r\n### Version 1.0 differences\r\n\r\nThe following configuration properties are no longer used and will be ignored if they are present in the config:\r\n\r\n* `useSecureAPI` - All communications to the ReCaptcha servers are performed over HTTPS. There is no option to use HTTP.\r\n* `forceLanguageInURL` - ReCaptcha now properly displays the captcha in the selected language. We no longer have to force the language.\r\n\r\n# Usage - ReCaptcha\r\n\r\nThe plugin is simple to use. In order to use it, there are four basic steps:\r\n\r\n## Edit the Configuration\r\n\r\nThe configuration values are pretty self-explanatory, and match with values used by the ReCaptcha service. You must enter your public and private ReCaptcha keys, or errors will be thrown when trying to display a captcha.\r\n\r\n### Proxy Server Configuration\r\n\r\nIf your server needs to connect through a proxy to the ReCaptcha service, add the following to the ReCapctcha configuration. **These properties are not created by the quickstart script. They must be added manually.**\r\n\r\n    proxy {\r\n        server = \"\"   // IP or hostname of proxy server\r\n        port = \"\"     // Proxy server port, defaults to 80\r\n        username = \"\" // Optional username if proxy requires authentication\r\n        password = \"\" // Optional password if proxy requires authentication\r\n    }\r\n\r\nOnly the `server` property is required. The `port` will default to `80` if not specified. The `username` and `password` properties need to be specified only when the proxy requires authentication.\r\n\r\nLike other configurations, this can be placed at the top-level `recaptcha` entry, or it can be specified on a per-environment basis.\r\n\r\n## Use the Tag Library\r\n\r\nThe plugin includes four ReCaptcha tags:  `<recaptcha:ifEnabled>`, `<recaptcha:ifDisabled>`, `<recaptcha:recaptcha>`, and  `<recaptcha:ifFailed>`.\r\n\r\n* The `<recaptcha:ifEnabled>` tag is a simple utility tag that will render the contents of the tag if the captcha is enabled in  `RecaptchaConfig.groovy`.\r\n* The `<recaptcha:ifDisabled>` tag is a simple utility tag that will render the contents of the tag if the captcha is disabled in  `RecaptchaConfig.groovy`.\r\n* The `<recaptcha:recaptcha>` tag is responsible for generating the correct HTML output to display the captcha. It supports three attributes: \"theme\", \"lang\", and \"type\". These attributes map directly to the values that can be set according to the ReCaptcha API. See the [ReCaptcha Client Guide](https://developers.google.com/recaptcha/docs/display#config) for more details.\r\n    * The `includeScript` attribute can also be set. If `includeScript` is set to `false` at either the global or tag level, the `<script>` tag required by ReCaptcha will not be included in the generated HTML. The `<recaptcha:script>` tag is also required in this scenario.\r\n* The `<recaptcha:ifFailed>` tag will render its contents if the previous validation failed. Some ReCaptcha themes, like \"clean\", do not display error messages and require the developer to show an error message. Use this tag if you're using one of these themes.\r\n* The `<recaptcha:script>` tag will render the required `<script>` tag. Combine this with the global or tag-level `includeScript=false` setting to allow putting the `<script>` tag elsewhere in your markup. This tag also supports the \"lang\" attribute. **This does not work in the `<head>` section of the page**\r\n\r\n## Verify the Captcha\r\n\r\nIn your controller, call `recaptchaService.verifyAnswer(session, request.getRemoteAddr(), params)` to verify the answer provided by the user. This method will return true or false. Also note that `verifyAnswer` will return `true` if the plugin has been disabled in the configuration - this means you won't have to change your controller.\r\n\r\n## Examples\r\n\r\nHere's a simple example pulled from an account creation application.\r\n\r\n### Tag Usage\r\n\r\nIn `create.gsp`, we add the code to show the captcha:\r\n\r\n    <recaptcha:ifEnabled>\r\n        <recaptcha:recaptcha theme=\"dark\"/>\r\n    </recaptcha:ifEnabled>\r\n\r\nIn this example, we're using ReCaptcha's \"dark\" theme. Leaving out the \"theme\" attribute will default the captcha to the \"light\" theme.\r\n\r\n### Tag Usage with Separate Script\r\n\r\nSet the `includeScript` value to `false` either at the tag level (below), or in the global ReCaptcha settings.\r\n\r\n    <body>\r\n      <g:form action=\"validateNormal\" method=\"post\" >\r\n        <recaptcha:ifEnabled>\r\n          <recaptcha:recaptcha includeScript=\"false\"/>\r\n        </recaptcha:ifEnabled>\r\n        <br/>\r\n        <g:submitButton name=\"submit\"/>\r\n      </g:form>\r\n      <recaptcha:script/>\r\n    </body>\r\n\r\nThis will cause the `<script src=\"https://www.google.com/recaptcha/api.js?\" async=\"\" defer=\"\"></script>` tag to be output separately at the bottom of the document instead of just before the `<div>` containing the captcha.\r\n\r\n### Customizing the Language\r\n\r\nIf you want to change the language your captcha uses, set `lang = \"someLang\"` in the `<recaptcha/>` tag.\r\n\r\nSee [ReCaptcha Language Codes](https://developers.google.com/recaptcha/docs/language) for available languages.\r\n\r\n### Verify User Input\r\n\r\nHere's an abbreviated controller class that verifies the captcha value when a new user is saved:\r\n\r\n\timport com.megatome.grails.RecaptchaService\r\n\tclass UserController {\r\n\t\tRecaptchaService recaptchaService\r\n\r\n\t\tdef save = {\r\n\t\t\tdef user = new User(params)\r\n\t\t\t...other validation...\r\n\t\t\tdef recaptchaOK = true\r\n\t\t\tif (!recaptchaService.verifyAnswer(session, request.getRemoteAddr(), params)) {\r\n\t\t\t\trecaptchaOK = false\r\n\t\t\t}\r\n\t\t\tif(!user.hasErrors() && recaptchaOK && user.save()) {\r\n\t\t\t\trecaptchaService.cleanUp(session)\r\n\t\t\t\t...other account creation acivities...\r\n\t\t\t\trender(view:'showConfirmation',model:[user:user])\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\trender(view:'create',model:[user:user])\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n### Testing\r\n\r\nStarting with version 0.4.5, the plugin should be easier to integrate into test scenarios. You can look at the test cases in the plugin itself, or you can implement something similar to:\r\n\r\n\tprivate void buildAndCheckAnswer(def postText, def expectedValid, def expectedErrorMessage) {\r\n\t    def mocker = new MockFor(Post.class)\r\n\t    mocker.demand.getQueryString(4..4) { new QueryString() }\r\n\t    mocker.demand.getText { postText }\r\n\t    mocker.use {\r\n\t      def response = recaptchaService.checkAnswer(\"123.123.123.123\", \"abcdefghijklmnop\", \"response\")\r\n\r\n\t      assertTrue response.valid == expectedValid\r\n\t      assertEquals expectedErrorMessage, response.errorMessage\r\n\t    }\r\n\t}\r\n\r\n\r\nThe `postText` parameter represents the response from the ReCaptcha server. Here are examples of simulating success and failure results:\r\n\r\n\tpublic void testCheckAnswerSuccess() {\r\n\t    // ReCaptcha server will return true to indicate success\r\n\t    buildAndCheckAnswer(\"true\", true, null)\r\n\t}\r\n\r\n\tpublic void testCheckAnswerFailure() {\r\n\t    // ReCaptcha server will return false, followed by the error message on a new line for failure\r\n\t    buildAndCheckAnswer(\"false\\\\nError Message\", false, \"Error Message\")\r\n\t}\r\n\r\n\r\n# Usage - Mailhide\r\n\r\n## Edit the Configuration\r\n\r\nThe `recaptcha-quickstart` plugin creates basic configuration. You must enter your public and private Mailhide keys, or errors will be thrown when trying to display a Mailhide link.\r\n\r\n## Use the Tag Library\r\n\r\nThe plugin includes two Mailhide tags: `<recaptcha:mailhide>` and `<recaptcha:mailhideURL>`.\r\n\r\n* The `<recaptcha:mailhide>` tag creates a Mailhide URL that opens in a new, pop-up window per the Mailhide specification. It supports one attribute: \"emailAddress\", to specify the email to be hidden. The link will be created around whatever content is in the body of the tag.\r\n* The `<recaptcha:mailhideURL>` tag creates a \"raw\" URL that can be used however desired. This is useful if the pop-up behavior of the other tag is not wanted. It supports two attributes: \"emailAddress\" and \"var\". The \"emailAddress\" attribute specifies the email to be hidden, while the \"var\" attribute specifies the name of the variable that the created URL should be available under in the page. The URL variable is only available in the context of the tag body.\r\n\r\n## Examples\r\n\r\n### mailhide tag\r\n\r\n    <recaptcha:mailhide emailAddress=\"x@example.com\">Some text to wrap in a link</recaptcha:mailhide>\r\n\r\n\r\nwill create:\r\n\r\n\r\n\t<a href=\"http://www.google.com/recaptcha/mailhide/d?k=...publicKey...&c=..encryptedEmail...\"\r\n\t     onclick=\"window.open('http://www.google.com/recaptcha/mailhide/d?k=...publicKey...&c=...encryptedEmail...', '', \r\n\t     'toolbar=0,scrollbars=0,location=0,statusbar=0,menubar=0,resizable=0,width=500,height=300'); return false;\" \r\n\t     title=\"Reveal this e-mail address\">Some text to wrap in a link</a>\r\n\r\n\r\n### mailhideURL tag\r\n\r\n    <recaptcha:mailhideURL emailAddress=\"x@example.com\" var=\"mu\">\r\n        Created Mailhide URL: ${mu}\r\n    </recaptcha:mailhideURL>\r\n\r\n\r\nwill create:\r\n\r\n\r\n    Created Mailhide URL: http://www.google.com/recaptcha/mailhide/d?k=...publicKey...&c=...encryptedEmail...\r\n\r\n\r\n# Misc.\r\n\r\n\r\n### CHANGELOG\r\n\r\n* 1.1.0\r\n    * Update feedback mechanisms. ([GitHub Issue #25](https://github.com/iamthechad/grails-recaptcha/issues/25))\r\n    * Add support for emitting the `<script>` tag required for captcha in a separate location. ([GitHub Issue #26](https://github.com/iamthechad/grails-recaptcha/issues/26))\r\n* 1.0.0 Initial support for the new \"checkbox\" style captcha. ([GitHub Issue #22](https://github.com/iamthechad/grails-recaptcha/issues/22))\r\n    * This version of the plugin only supports the \"traditional\" captcha use case of automatic rendering. Explicit rendering will be available soon. See [the ReCaptcha docs](https://developers.google.com/recaptcha/docs/display) for more information about automatic vs. explicit.\r\n    * `useSecureAPI` is no longer supported as a configuration option. All communication with ReCaptcha servers is over HTTPS.\r\n    * `forceLanguageInURL` is no longer supported as a configuration option. ReCaptcha properly display the selected language no matter what language the browser uses.\r\n* 0.7.0\r\n    * Add support for connecting through a proxy server when verifying the captcha value. ([GitHub Issue #21](https://github.com/iamthechad/grails-recaptcha/issues/21))\r\n* 0.6.9\r\n    * Remove unused import for `org.codehaus.groovy.grails.commons.ConfigurationHolder` that doesn't exist in Grails 2.4 any more. ([GitHub Issue #20](https://github.com/iamthechad/grails-recaptcha/pull/20))\r\n* 0.6.8\r\n    * Don't crash when the `enabled` parameter is missing. Log missing config params, but use defaults. ([GitHub Issue #18](https://github.com/iamthechad/grails-recaptcha/issues/18))\r\n    * Add blurb about externalized config. ([GitHub Issue #19](https://github.com/iamthechad/grails-recaptcha/issues/19))\r\n* 0.6.7\r\n    * Fix a stupid bug that would cause a crash when determining if it's enabled. ([GitHub Issue #14](https://github.com/iamthechad/grails-recaptcha/issues/14))\r\n* 0.6.6\r\n    * Behave correctly when config options are \"false\" or missing. ([GitHub Issue #13](https://github.com/iamthechad/grails-recaptcha/issues/13))\r\n* 0.6.5\r\n    * Don't crash when boolean configuration options are missing. ([GitHub Issue #10](https://github.com/iamthechad/grails-recaptcha/issues/10))\r\n    * Establish defaults for boolean options in case they go missing. ([GitHub Issue #11](https://github.com/iamthechad/grails-recaptcha/issues/11))\r\n    * Don't crash when creating an AJAX captcha. ([GitHub Issue #12](https://github.com/iamthechad/grails-recaptcha/issues/12))\r\n* 0.6.4\r\n    * Ensure that true/false settings are loaded correctly from a .properties file. ([GitHub Issue #9](https://github.com/iamthechad/grails-recaptcha/issues/9))\r\n* 0.6.3\r\n    * Ensure that AJAX tags properly use HTTPS when specified. ([GitHub Issue #7](https://github.com/iamthechad/grails-recaptcha/issues/7))\r\n* 0.6.2\r\n    * Remove spurious `println` left over. ([GitHub Issue #5](https://github.com/iamthechad/grails-recaptcha/issues/5))\r\n    * Change install behavior to not create `RecaptchaConfig.groovy` in `_Install.groovy`. Add new script `recaptcha-quickstart` to handle creation of required configuration. ([GitHub Issue #6](https://github.com/iamthechad/grails-recaptcha/issues/6))\r\n* 0.6.0\r\n    * Add the ability to display the widget using AJAX. ([GitHub Issue #3](https://github.com/iamthechad/grails-recaptcha/issues/3))\r\n    * Change plugin to require Grails 2.0 at a minimum.\r\n* 0.5.3\r\n    * Add the ability to force a different language to be displayed.\r\n* 0.5.1 & 0.5.2\r\n    * Update to use the new ReCaptcha URLs.\r\n* 0.5.0\r\n    * Add Mailhide support.\r\n    * Add support for specifying configuration options elsewhere than `RecaptchaConfig.groovy` via the `grails.config.locations` method.\r\n* 0.4.5\r\n    * Add code to perform the ReCaptcha functionality - removed recaptcha4j library.\r\n    * Don't add captcha instance to session to avoid serialization issues.\r\n    * Hopefully make it easier to test against.\r\n* 0.4\r\n    * New version number for Grails 1.1. Same functionality as 0.3.2\r\n* 0.3.2\r\n    * Moved code into packages.\r\n    * Tried to make licensing easier to discern.\r\n    * Updated to Grails 1.0.4\r\n* 0.3\r\n    * Added support for environments and new `<recaptcha:ifFailed>` tag.\r\n    * Updated to Grails 1.0.3\r\n* 0.2\r\n    * initial release, developed and tested against Grails 1.0.2\r\n\r\n### Thanks\r\n\r\n* The `recaptcha-quickstart` script was borrowed heavily from the [Spring Security Core plugin](http://grails.org/plugin/spring-security-core).\r\n\r\n\r\n# Suggestions or Comments\r\n\r\nFeel free to submit questions through GitHub or to StackOverflow. (The Grails mailing list appears to be defunct.)\r\n\r\nAlternatively you can contact me directly - cjohnston at megatome dot com\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}